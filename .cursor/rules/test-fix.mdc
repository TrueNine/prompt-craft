---
description:
globs: 
alwaysApply: false
---

# 通用测试修复指南

## 核心原则
- 严格遵循[测试规则](mdc:.cursor/rules/test.mdc)修复测试代码
- 禁止修改被测试的组件或函数本身
- 如被测试对象存在问题，请提出解决方案而非直接修改
- 测试用例覆盖不足时，需补充相关测试场景
- 所有命名必须符合项目规范（文件名、测试描述、方法名等）
- 添加充分的日志输出，提升测试可观测性和问题诊断能力

## 日志与可观测性
- 在关键测试步骤添加详细日志输出
- 记录测试环境信息和关键变量
- 测试失败时自动保存对象状态

## 优化要点
- 每次修改后重新执行完整检查流程，直到所有问题解决
- 针对每个错误提供具体原因分析和解决方案
- 遇到无法自动修复的问题时，详细说明原因并给出建议
- 确保测试代码遵循以下原则：
  - 测试描述清晰表达测试意图
  - 每个测试只验证一个行为
  - 使用适当的断言方法
  - 正确处理异步操作
  - 适当模拟外部依赖
  - 添加充分的日志输出辅助诊断
  - 复杂对象使用状态快照提高可观测性
  - 对于间歇性失败的测试，增加详细的状态记录

## 修复流程（按顺序执行）
1. **执行 ESLint 修复**
   ```bash
   pnpm eslint <文件路径> --fix
   ```
   - 修复所有代码风格和潜在问题
   - 确保无剩余 ESLint 警告和错误

2. **修复类型问题**
   ```bash
   pnpm vue-tsc --noEmit
   ```
   - 解决所有类型不匹配、未定义变量等问题
   - 添加必要的类型声明和导入

3. **修复测试逻辑**
   ```bash
   pnpm vitest run <文件路径> --reporter verbose
   ```
   - 排查测试失败原因（断言错误、异步问题等）
   - 修正测试逻辑，确保测试能正确验证功能

## Typescript/Vue测试特有工具
- 使用 vitest 内置的调试工具（如 test.skip、test.todo、vi.spyOn 等）
- 对组件进行挂载测试时确保正确配置全局插件和依赖
- 组件快照测试需注意属性和事件绑定

## 命名规范检查
- 文件名必须以 `.spec.ts` 结尾
- 测试套件名称应清晰描述被测试组件/功能
- 测试方法名称应描述测试的具体场景和预期结果
- 所有命名与项目其他测试保持一致的风格