---
description: 
globs: 
alwaysApply: true
---

# 📖 规则参考

- 强制编码守则：[shared-dev-standard.mdc](mdc:.cursor/rules/shared-dev-standard.mdc)
- 开发环境配置：[shared-dev-env.mdc](mdc:.cursor/rules/shared-dev-env.mdc)
- 生产环境配置：[shared-prod-env.mdc](mdc:.cursor/rules/shared-prod-env.mdc)
- 提交消息规范：[shared-git-commit-message-standard.mdc](mdc:.cursor/rules/shared-git-commit-message-standard.mdc)
- 单元测试守则：[test.mdc](mdc:.cursor/rules/test.mdc)

# 🎯 核心原则

- 代码质量与工程效率并重
- 静态类型与编译时检查优先
- 安全性与性能要求不可妥协
- 可维护性与可扩展性至关重要

# 💻 技术选型要求

- 必须选择编译型强类型语言作为主要开发语言
- 必须确保代码可在主流平台和环境中稳定运行
- 必须配置静态类型检查工具并严格执行
- 必须最小化外部依赖，优先使用标准库

# ⚡ 性能优化准则

- 严格控制内存分配和复制操作
- 关注关键指标：响应时间、内存占用、启动时间
- 优化算法复杂度，合理控制资源开销
- 在开发初期就需考虑性能因素

# 📝 代码规范要求

- 强制执行静态类型检查
- 编译期检查优先于运行时检查
- 显式声明所有外部依赖关系
- 禁止使用动态特性和反射机制
- 统一代码风格和格式规范
- 删除所有注释掉的无用代码
- 禁止在行尾添加注释

# 📚 文档规范

- 所有公开接口必须有完整文档
- 复杂业务逻辑必须有详细注释
- 代码结构必须清晰，便于维护
- 重要算法必须说明实现原理
- 配置项必须有使用说明

# 🔒 安全规范

- 禁止硬编码任何敏感信息
- 必须使用安全的密钥存储方案
- 所有外部输入必须经过验证
- 必须进行权限和身份认证
- 敏感操作必须留存审计日志

# ⚠️ 错误处理规范

- 使用类型系统捕获潜在错误
- 编译期处理所有可预见异常
- 记录完整的错误上下文信息
- 提供友好的错误提示信息
- 关键操作必须有容错机制

# ✅ 测试规范

- 核心功能必须有单元测试
- 验证所有公开接口的边界条件
- 保持测试代码的可维护性
- 模拟外部依赖进行独立测试
- 定期进行回归测试
