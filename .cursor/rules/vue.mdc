---
description: Vue 3 项目开发规范与最佳实践指南
globs: *.vue
alwaysApply: false
---

## 技术栈
- Vue 3.4+：使用`<script setup>`语法
- Vue Router 4.2+：组合式API
- Pinia 2.1+：首选状态管理
- TypeScript 5.0+：严格模式
- Vite 5.0+：首选构建工具
- Unplugin系列：自动导入API/组件/路由/图标

## 组件规范
- 命名：组件用PascalCase，属性用camelCase，事件用camelCase
- 文件：组件文件用PascalCase，路由用snake_case
- 结构：单一职责，扁平化，组合式API
- Props定义：使用TypeScript接口，设置默认值
- Emits定义：使用TypeScript接口，明确参数类型

```ts
// Emits示例
interface Emits {
  close: []                              // 无参数
  update: [value: string]                // 单参数
  submit: [data: FormData, valid: boolean] // 多参数
}
const emit = defineEmits<Emits>()
```

## 性能优化
- 大列表使用虚拟滚动
- 优先组件级状态，合理使用computed缓存
- 避免深层响应式数据

## 禁止事项
- 使用this语法
- 使用Options API
- 直接操作DOM
- 使用any类型
- 手动导入已配置自动导入的内容

## 组件模板
```vue
<script setup lang="ts">
// 类型定义
interface Props {
  title: string
  content?: string
}

// Props和Emits
const props = withDefaults(defineProps<Props>(), {
  content: '默认值'
})
const emit = defineEmits<{
  submit: [data: FormData]
}>()

// 状态和计算属性
const form = ref(new FormData())
const isValid = computed(() => form.value.has('title'))

// 方法
function handleSubmit() {
  if (isValid.value) emit('submit', form.value)
}
</script>

<template>
<div>
  <h1>{{ title }}</h1>
  <p v-if="content">{{ content }}</p>
  <form @submit.prevent="handleSubmit">
    <slot />
    <button type="submit" :disabled="!isValid">提交</button>
  </form>
</div>
</template>
```