---
description: Vue测试规范
globs: *.spec.ts,*.spec.tsx
alwaysApply: false
---

# 核心原则
- 严格践行测试驱动开发，确保 90% 以上覆盖率
- 全面测试：包含边界条件和异常场景
- 测试组织：合理分组，规范命名
- 及时维护：修正不符命名，清理冗余测试
- 优化代码：使用参数化测试减少重复

## 通用命名规范

- 合理遵循特定语言命名方式

### 测试类/套件命名
- 单元测试：`[类名/文件名]Test`
- 分组/嵌套：`[被测试方法/功能][Function|Variable|Class|Object]Group`

### 测试方法/用例命名
- 正向测试：描述 `正常/预期 [条件] 时，[预期结果]`
- 异常测试：描述 `异常/错误 [条件] 时，[抛出异常/错误处理]`
- 边界测试：描述 `边界 [条件] 时，[预期结果]`
- 性能测试：描述 `性能 [功能] 应达到 [指标]`
- 特性测试：描述 `特性 [特性] 时，[预期结果]`

### 测试组织规范
- 一个测试类/文件专注于测试一个主要对象
- 逻辑相关的测试用例应分组组织
- 避免测试间的依赖，每个测试应独立可运行
- 功能类似或重复的测试应合并或参数化

## 环境工具
- 包管理：pnpm
- 测试框架：vitest
- 代码检查：eslint
- 类型检查：vue-tsc

## 命名规范
- 测试文件以 `.spec.ts`或`.spec.tsx` 结尾
- 按功能分组测试用例

## 编写规则
- 使用TypeScript/Vue语言特性
  - 类型推断、泛型、解构、可选链
  - 组件测试用@vue/test-utils，且必须使用 tsx
  - 函数式、表达式化代码风格
- 充分利用Vue特性
  - 测试slot、props、emit
  - 保持Vue风格
- 使用vitest高级特性
  - 快照测试
  - 参数化测试
  - 异步测试